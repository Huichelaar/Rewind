// Changes in Event/Everything Assembler format.

PUSH

  // Make third save inaccessible.
  ORG 0xABA50         // Skip last save file when pressing down.
  SHORT 0x2B01
  ORG 0xABA68         // Skip last save file when pressing up.
  SHORT 0x2001
  ORG 0xAB9DE         // Skip last save file when pressing up after selecting New Game.
  SHORT 0x2401
  ORG 0xAB9AC         // Skip last save file when pressing down after selecting New Game.
  SHORT 0x2C01
  ORG 0xAB9C0         // New game loop, only check save 0 & 1 to see if all save files are occupied.
  SHORT 0x2D01
  ORG 0xABC20         // Don't draw "copy", "newgame", etc. when save 0 & 1 occupied.
  SHORT 0x2D01
  ORG 0xAB10C         // Do not draw last save file.
  SHORT 0x2F01
  ORG 0xAB8D8         // Return to main menu when 0 and 1 are empty after erasing.
  SHORT 0x2901
  ORG 0xAB8E8         // Return to main menu when 0 and 1 are occupied after copying.
  SHORT 0x2D01
  ORG 0xAB8FC         // Return to main menu when 0 and 1 are occupied after copying (again).
  SHORT 0x2D01
  ORG 0xAB0BC         // Vertically center the two save files.
  SHORT 0x3530
  ORG 0xAB25C         // Adjust the pencil cursor.
  SHORT 0x21C0
  ORG 0xAB234         // Adjust the pencil cursor when selected.
  SHORT 0x20C0
  ORG 0xAB154         // Adjust the save scroll when it rotates & transforms.
  SHORT 0x322E
  ORG 0xAB194         // Adjust the save scroll when resuming.
  SHORT 0x3240
  ORG 0xAB1AA         // Adjust the save scroll. (Offscreen?)
  SHORT 0x3240
  ORG 0xAB1CA         // Adjust the save scroll.
  SHORT 0x322E
  
POP

// TODO, temporary fixed rewind buffer instance.
// remove when you can.
ALIGN 4; REW_tempRewindBuf:
WORD 0x1C                     // Size of area of buffer that's in use.
POIN REW_tempSeq1             // Ptr to End-sequence.

REW_tempSeq1:
SHORT 0                       // Size of preceding sequence. There is none, so size = 0.
SHORT 0x18                    // Size of this sequence.

REW_tempSeq1Entry1:
BYTE 2                        // diffType = combat Action.
BYTE 0                        // extraParam
BYTE 08 05                    // x and y.
SHORT 0x0006                  // Size of data in bytes. Data is everything that follows from here.
BYTE 0x09 0x0A                // exp_Diff           = +10
BYTE 0x13 0xF7                // curHP_Diff         = -9
BYTE 0x28 0x04                // ranks[0] (sword)   = +4
// End of data.

// Entry 2
REW_tempSeq1Entry2:
BYTE 2                        // diffType = combat Action.
BYTE 0                        // extraParam
BYTE 08 06                    // x and y.
SHORT 0x0002                  // Size of data in bytes. Data is everything that follows from here.
BYTE 0x13 0xF2                // curHP_Diff         = -14
// End of data.
